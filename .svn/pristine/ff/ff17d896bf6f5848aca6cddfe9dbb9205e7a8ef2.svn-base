package com.giosis.util.qdrive.util;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;

import com.giosis.util.qdrive.singapore.MyApplication;

import java.io.File;

public class DatabaseHelper extends SQLiteOpenHelper {
    private static String TAG = "DatabaseHelper";

    private static DatabaseHelper mInstance = null;
    private static SQLiteDatabase sqLiteDatabase;
    private final Context mContext;

    private static final int DB_VERSION = 1;
    private static final String DB_NAME = "QdriveDB";

    public static final String DB_TABLE_INTEGRATION_LIST = "INTEGRATION_LIST";
    public static final String DB_TABLE_USER_INFO = "USER_INFO";
    public static final String DB_TABLE_REST_DAYS = "REST_DAYS";
    public static final String DB_TABLE_SCAN_DELIVERY = "SCAN_DELIVERY";


    // LazyHolder 사용
    public static DatabaseHelper getInstance() {

        if (mInstance == null) {

            Log.e("krm0219", "DB getInstance");
            mInstance = LazyHolder.INSTANCE;
            sqLiteDatabase = mInstance.openDatabase();
        }

        return mInstance;
    }

    private static class LazyHolder {

        private static final DatabaseHelper INSTANCE = new DatabaseHelper(MyApplication.getContext());
    }


    private DatabaseHelper(final Context context) {
        super(context, DB_NAME, null, DB_VERSION);

        this.mContext = context;
    }


    @Override
    public void onCreate(SQLiteDatabase db) {

        Log.e("DB", "onCreate");
    }

    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {

        Log.e("DB", "onUpgrade");
    }


    /***
     * Method to insert record
     * @param table     : table name
     * @param values    : ContentValues instance
     * @return          : long (rowid)
     */
    public long insert(String table, ContentValues values) {

        return sqLiteDatabase.insert(table, null, values);
    }

    /****
     * Method for select statements
     * @param sql       : sql statements
     * @return          : cursor
     */
    public Cursor get(String sql) {

        return sqLiteDatabase.rawQuery(sql, null);
    }

    /***
     * Method to update record
     * @param table         : table name
     * @param values        : ContentValues instance
     * @param whereClause   : Where Clause
     * @return              ; int
     */
    public int update(String table, ContentValues values, String whereClause, String[] whereArgs) {

        return sqLiteDatabase.update(table, values, whereClause, whereArgs);
    }

    /***
     * Method to delete record
     * @param table         : table name
     * @param whereClause   : Where Clause
     * @return              : int
     */
    public int delete(String table, String whereClause) {

        return sqLiteDatabase.delete(table, whereClause, null);
    }


    /***
     * Method to close database & instance null
     */
    @Override
    public void close() {
        if (mInstance != null) {
            Log.e("DB", "instance of database (" + DB_NAME + ") close !");
            sqLiteDatabase.close();
            mInstance = null;
        }
    }


    private SQLiteDatabase openDatabase() {

        if (sqLiteDatabase != null) {
            sqLiteDatabase.close();
        }

        String DB_PATH = mContext.getApplicationInfo().dataDir + "/databases/" + DB_NAME + ".db";
        Log.e("DB", "DB PATH : " + DB_PATH);

       /* String getPackageName = mContext.getApplicationContext().getPackageName();
        String dbFullPathName = "/data/data/" + getPackageName + "/databases/" + DB_NAME + ".db";
        SQLiteDatabase db = SQLiteDatabase.openDatabase(dbFullPathName, null, SQLiteDatabase.OPEN_READWRITE);*/

        File dbFile = new File(DB_PATH);
        boolean hasDB = dbFile.exists();
        Log.e("DB", "Has DB : " + hasDB);

        return SQLiteDatabase.openDatabase(DB_PATH, null, SQLiteDatabase.OPEN_READWRITE);
    }
}