function init() {

    $("#loginID").val(localStorage.getItem('opId'));
    $("#pw").val(localStorage.getItem('opPasswd'));
    $("#versionCode").text(version);

    if(serviceNameLogin.includes("test")) {
        $("#environment").text("test - ");
    } else if(serviceNameLogin.includes("staging")) {
        $("#environment").text("staging -");
    }

    document.addEventListener("deviceready", onDeviceReady, false);

    localStorage.clear();

    setButton("btnLogin", getLoginLocation);

    // ko-KR / ms-MY
       getLanguage();
       getLocaleName();
}

function getLanguage() {
   navigator.globalization.getPreferredLanguage(onSuccess, onError);

   function onSuccess(language) {
         console.log('language: ' + language.value + '\n');
      }

      function onError(){
         alert('Error getting language');
      }
}

function getLocaleName() {
   navigator.globalization.getLocaleName(onSuccess, onError);

   function onSuccess(locale) {
      console.log('locale: ' + locale.value);
   }

   function onError(){
      alert('Error getting locale');
   }
}

function onDeviceReady() {

    document.addEventListener("backbutton", onBackKeyDown, false);

    createTable(db, 'DELIVERY', 'contr_no unique, partner_ref_no, invoice_no, stat, rcv_nm, sender_nm, tel_no, hp_no, zip_code, address, img_path, fail_reason, del_memo, rcv_type, driver_memo, punchOut_stat, reg_dt, chg_dt, reg_id, chg_id, delivery_dt, delivery_cnt, route, self_memo', function() {
        createTable(db, 'PICKUP', 'contr_no unique, partner_ref_no, invoice_no, stat, req_nm, req_dt, tel_no, hp_no, zip_code, address, desired_date, desired_time, img_path, fail_reason, del_memo, driver_memo, punchOut_stat, reg_dt, chg_dt, reg_id, chg_id, req_qty, real_qty, retry_dt, cust_no, partner_id, failed_count, route, self_memo', function() {
            createTable(db, 'SCAN_DELIVERY', 'contr_no, partner_ref_no, invoice_no, stat, rcv_nm, sender_nm, tel_no, hp_no, zip_code, address, img_path, fail_reason, del_memo, rcv_type, driver_memo, punchOut_stat, reg_dt, chg_dt, reg_id, chg_id, delivery_dt, delivery_cnt', function() {
                createTable(db, 'INTEGRATION_LIST', 'contr_no unique, seq_orderby, partner_ref_no, invoice_no, stat, tel_no, hp_no, zip_code, address, self_memo, type, route, sender_nm, rcv_nm, rcv_request,  desired_date, req_qty, req_nm, failed_count, delivery_dt, delivery_cnt, chg_dt, chg_id, reg_dt, reg_id, real_qty, retry_dt, driver_memo, img_path, stat2, fail_reason, desired_time, rcv_type, punchOut_stat, partner_id, cust_no, secret_no_type, secret_no, lat, lng , secure_delivery_yn, parcel_amount, currency, order_type_etc', function() {
                    createTable(db, 'REST_DAYS', 'rest_dt, title', function() {
                        createTable(db, 'USER_INFO', 'opId unique, last_login_dt, last_logout_dt, auto_upld_yn, auth_1, auth_2, auth_3, auth_4, sort_idx, use_custom', testSuccess, failCB_Common);
                    }, failCB_Common);
                }, failCB_Common);
            }, failCB_Common);
        }, failCB_Common);
    }, failCB_Common);

    // stat2 사용x / desired_time (route=rpc 일때만 사용)
}

var isDBCreate = false;
function testSuccess(tx, results) {

    isDBCreate = true;
    console.log("★★★★★★★ ::  DB Success ");
}

function getLoginLocation() {

    var Latitude = 0;
    var Longitude = 0;

    try {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(onLocationSuccess, onLocationError, {
                enableHighAccuracy: true,
                timeout: 2000,
                maximumAge: 300
            });
        } else {
            checkAuth(Latitude, Longitude);
        }
    } catch (e) {

        console.log('★★★★★★★ :: getLoginLocation error' + e.message);
        checkAuth(Latitude, Longitude);
    }
}

function onLocationSuccess(position) {

    var Latitude = position.coords.latitude;
    var Longitude = position.coords.longitude;

    console.log("★★★★★★★ :: getLoginLocation Success  Latitude : " + Latitude + " / " + "Longitude : " + Longitude);
    checkAuth(Latitude, Longitude);
}

function onLocationError(error) {

    var Latitude = 0;
    var Longitude = 0;

    console.log("★★★★★★★ :: getLoginLocation failed  > " + error.code + '  message : ' + error.message);
    checkAuth(Latitude, Longitude);
}


function checkAuth(Latitude, Longitude) {

    var loginId = $("#loginID").val();
    var password = $("#pw").val();

    if (loginId == "") {
        alert("Please input ID.");
        return;
    }

    if (password == "") {
        alert("Please input Password.");
        return;
    }

    if(!isDBCreate) {

        alert("Sorry, DB encountered a problem. You may need to restart the device.");
        return;
    }

    var methodName = "LoginQDRIVE_V2";

    var result;
    var uuid = device.uuid;

    console.log(isDBCreate + "  ◆◆◆◆ Login > " + loginId + " " + password + " " + uuid);

    var params = new RMSParam();
    params.add("login_id", loginId.trim());
    params.add("password", password);
    params.add("admin_yn", "N");
    params.add("chanel", "QDRIVE"); //QSIGN, QS는 접속 불가 (서비스 변경)
    params.add("ip", "");
    params.add("referer", uuid);
    params.add("vehicle", "");
    params.add("latitude", Latitude);
    params.add("longitude", Longitude);

    cordova.require("com.giosis.util.qdrive.util.LoadingDialog").show();
    result = RMSHelper.callWebMethod(serviceNameLogin, methodName, params.toJson());
    cordova.require("com.giosis.util.qdrive.util.LoadingDialog").hide();


    if (result == -9999) { // Network Error
        return;
    }

    if (result == null || result.ResultCode != 0) {

        cordova.require("com.giosis.util.qdrive.util.LoadingDialog").hide();

        if (result.ResultCode == -10) {
            alert("Your Qdrive account has been deactivated.");
        } else if (result.ResultMsg != "") {
            alert(result.ResultMsg);
        } else {
            alert("Sorry, your sign-in information is not valid. Please try again with your correct ID and password.");
        }

        $("#pw").val("");

        cordova.require("com.giosis.util.qdrive.util.SharedPreferencesHelper").setSigninState({
                signInState: false,
                opId: ''
            }, null,
            function(error) {
                cordova.require("com.giosis.util.qdrive.util.LoadingDialog").hide();
            });
        return;
    }

    // Login Success
    var serverVersion = result.ResultObject.Version;

    if (version < serverVersion) {
        //alert("curr:" +version + ", server: " + serverVersion);
        alert("Qdrive is updated to v" + serverVersion + " \nYour Qdrive version is v" + version + " \nYour version will be upgraded.");
        cordova.require("com.giosis.util.qdrive.util.MainActivityStarter").goMarket();
        return;
    }

    console.log("◆◆◆◆ Login > " + JSON.stringify(result.ResultObject));
    console.log("◆◆◆◆ Login Locker Driver Status > " + result.ResultObject.locker_driver_status);


    localStorage.setItem('opId', result.ResultObject.OpId);
    localStorage.setItem('opNm', result.ResultObject.OpNm);
    localStorage.setItem('opType', result.ResultObject.OpType);
    localStorage.setItem('officeCd', result.ResultObject.OfficeCode);
    localStorage.setItem('officeNm', result.ResultObject.OfficeName);
    localStorage.setItem('DefaultYn', result.ResultObject.DefaultYn);
    localStorage.setItem('opPasswd', password);
    localStorage.setItem('groupCd', result.ResultObject.GroupNo);
    localStorage.setItem('authNo', result.ResultObject.AuthNo);
    localStorage.setItem('opEmail', result.ResultObject.EpEmail);
    localStorage.setItem('pickupDriverYN', result.ResultObject.PickupDriverYN);
    localStorage.setItem('SmsYn', result.ResultObject.SmsYn);
    localStorage.setItem('DeviceYn', result.ResultObject.DeviceYn);
    localStorage.setItem('login', "1");
    //krm0219
    localStorage.setItem('shuttle_driver_yn', result.ResultObject.shuttle_driver_yn);
    localStorage.setItem('locker_driver_status', result.ResultObject.locker_driver_status);

    var columns = '   opId ' + ' , auto_upld_yn , auth_1, auth_2, auth_3, auth_4';
    selectTable(db, columns, "USER_INFO", 'opId = "' + result.ResultObject.OpId + '"', '', '', '', successCB_getUserInfo, failCB_Common);
}

function successCB_getUserInfo(tx, results) {

    // 앱 처음 설치후 Login -  0
    // 그 이후 1
    var len = results.rows.length;
    var columns = '';
    console.log("★★★★★★★ ::  successCB_getUserInfo length " + len);

    // auth_1 : 실시간 업로드 여부 Default-'Y',
    //  AuthFunction  94번 유저만 셋팅에서 변경 가능
    if (len > 0) {

        if (results.rows.item(0).auto_upld_yn != '')
            localStorage.setItem('auto_upld_yn', results.rows.item(0).auto_updt_ld);

        localStorage.setItem('auth_1', results.rows.item(0).auth_1);
        localStorage.setItem('auth_2', results.rows.item(0).auth_2);
        if (results.rows.item(0).auth_3 != '')
            localStorage.setItem('auth_3', results.rows.item(0).auth_3);
        if (results.rows.item(0).auth_4 != '')
            localStorage.setItem('auth_4', results.rows.item(0).auth_4);


        columns = 'last_login_dt = ' + '"' + new Date().toISOString() + '", auth_1 = "Y", auth_2="Y"';
        var where = 'opId = "' + localStorage.getItem('opId') + '"';

        updateTableData(db, "USER_INFO", columns, where, null, failCB_Common);
    } else {

        columns = 'opId, last_login_dt, auto_upld_yn, auth_1, auth_2, auth_3, auth_4, sort_idx, use_custom';
        var data = '"' + localStorage.getItem('opId') + '",' + '"' + new Date().toISOString() + '",' + '"N", "Y", "Y", "N","N", "0", "N"';

        insertTableData(db, "USER_INFO", columns, data, null, failCB_Common);
    }

    deleteTable(db, "REST_DAYS", '', setRestDays, failCB_Common);
}

function setRestDays() {

    var methodName = "GetRestDays";
    var params;
    var rest_result;
    var dt = new Date();

    params = new RMSParam();
    params.add("svc_nation_cd", "SG");
    params.add("year", dt.getFullYear());
    rest_result = RMSHelper.callWebMethod(serviceName, methodName, params.toJson());

    for (var i = 0; i < rest_result.ResultObject.length; i++) {
        var rest_dt = rest_result.ResultObject[i].rest_dt;
        var title = rest_result.ResultObject[i].title;

        var rest_columns = 'rest_dt, title';
        var rest_data = '"' + rest_dt + '","' + title + '"';

        insertTableData(db, "REST_DAYS", rest_columns, rest_data, null, failCB_Common);
    }

    cordova.require("com.giosis.util.qdrive.util.SharedPreferencesHelper").setSigninState({
            signInState: true,
            opId: localStorage.getItem('opId'),
            opNm: localStorage.getItem('opNm'),
            officeCd: localStorage.getItem('officeCd'),
            officeNm: localStorage.getItem('officeNm'),
            DefaultYn: localStorage.getItem('DefaultYn'),
            opType: localStorage.getItem('opType'),
            authNo: localStorage.getItem('authNo'),
            device_id: device.uuid,
            service_type: 'DLV', //localStorage.getItem('service_type') 사용안함
            opEmail: localStorage.getItem('opEmail'),
            pickupDriverYN: localStorage.getItem('pickupDriverYN'),
            outletDriverYN: localStorage.getItem('shuttle_driver_yn')
        },
        succCB_setSigninState,
        function(error) {
            cordova.require("com.giosis.util.qdrive.util.LoadingDialog").hide();
        });
}


function succCB_setSigninState() {

    cordova.require("com.giosis.util.qdrive.util.LoadingDialog").hide();

    var columns = '   ifnull(datetime(max(reg_dt), "localtime"), "") as lastPunchedInTime ';

    selectTable(db, columns, "DELIVERY", 'punchOut_stat = "N" and reg_id = "' + localStorage.getItem('opId') + '"', '', '', '', successCB_getLastPunchedInTime_Delivery, failCB_Common);
}

function successCB_getLastPunchedInTime_Delivery(tx, results) {

    var len = results.rows.length;
    var columns = '    ifnull(datetime(max(reg_dt), "localtime"), "") as lastPunchedInTime ';


    if (len > 0) {

        if (results.rows.item(0).lastPunchedInTime != '') {

            localStorage.setItem('lastPunchedInTime', results.rows.item(0).lastPunchedInTime);

            var sms_yn = localStorage.getItem('SmsYn');
            var device_yn = localStorage.getItem('DeviceYn');

            if (sms_yn == "Y" && device_yn == "Y") {

                cordova.require("com.giosis.util.qdrive.util.MainActivityStarter").start();
                cordova.require("cordova/plugin/android/app").exitApp();
            } else {
                if (device_yn == "N") {
                    alert("You have attempted to login from unauthorized mobile phone.\nIf your mobile phone was changed, you have to pass the SMS verification.");
                }
                cordova.require("com.giosis.util.qdrive.util.MainActivityStarter").verify();
                cordova.require("cordova/plugin/android/app").exitApp();
            }
        } else {
            selectTable(db, columns, "PICKUP", 'punchOut_stat = "N" and reg_id = "' + localStorage.getItem('opId') + '"', '', '', '', successCB_getLastPunchedInTime_Pickup, failCB_Common);
        }
    } else {
        selectTable(db, columns, "PICKUP", 'punchOut_stat = "N" and reg_id = "' + localStorage.getItem('opId') + '"', '', '', '', successCB_getLastPunchedInTime_Pickup, failCB_Common);
    }
}

function successCB_getLastPunchedInTime_Pickup(tx, results) {

    var len = results.rows.length;

    if (len > 0) {

        if (results.rows.item(0).lastPunchedInTime != '') {
            localStorage.setItem('lastPunchedInTime', results.rows.item(0).lastPunchedInTime);

            var sms_yn = localStorage.getItem('SmsYn');
            var device_yn = localStorage.getItem('DeviceYn');

            if (sms_yn == "Y" && device_yn == "Y") {
                cordova.require("com.giosis.util.qdrive.util.MainActivityStarter").start();
                cordova.require("cordova/plugin/android/app").exitApp();
            } else {
                if (device_yn == "N") {
                    alert("You have attempted to login from unauthorized mobile phone.\nIf your mobile phone was changed, you have to pass the SMS verification.");
                }
                cordova.require("com.giosis.util.qdrive.util.MainActivityStarter").verify();
                cordova.require("cordova/plugin/android/app").exitApp();
            }
        } else {
            var sms_yn = localStorage.getItem('SmsYn');
            var device_yn = localStorage.getItem('DeviceYn');

            if (sms_yn == "Y" && device_yn == "Y") {

                cordova.require("com.giosis.util.qdrive.util.MainActivityStarter").start();
                cordova.require("cordova/plugin/android/app").exitApp();
            } else {
                if (device_yn == "N") {
                    alert("You have attempted to login from unauthorized mobile phone.\nIf your mobile phone was changed, you have to pass the SMS verification.");
                }
                cordova.require("com.giosis.util.qdrive.util.MainActivityStarter").verify();
                cordova.require("cordova/plugin/android/app").exitApp();

            }
        }
    } else {

        var sms_yn = localStorage.getItem('SmsYn');
        var device_yn = localStorage.getItem('DeviceYn');

        if (sms_yn == "Y" && device_yn == "Y") {

            cordova.require("com.giosis.util.qdrive.util.MainActivityStarter").start();
            cordova.require("cordova/plugin/android/app").exitApp();
        } else {
            if (device_yn == "N") {
                alert("You have attempted to login from unauthorized mobile phone.\nIf your mobile phone was changed, you have to pass the SMS verification.");
            }
            cordova.require("com.giosis.util.qdrive.util.MainActivityStarter").verify();
            cordova.require("cordova/plugin/android/app").exitApp();
        }
    }
}