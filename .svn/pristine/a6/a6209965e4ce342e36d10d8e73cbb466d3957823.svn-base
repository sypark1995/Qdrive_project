/*
 * Copyright (C) 2008 ZXing authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.giosis.util.qdrive.barcodescanner;

import android.app.Activity;
import android.content.ContentValues;
import android.content.Context;
import android.content.Intent;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.ColorMatrix;
import android.graphics.ColorMatrixColorFilter;
import android.graphics.Paint;
import android.graphics.SurfaceTexture;
import android.hardware.camera2.CameraDevice;
import android.hardware.camera2.CameraManager;
import android.os.Bundle;
import android.os.Environment;
import androidx.appcompat.app.AppCompatActivity;
import android.util.Log;
import android.util.Size;
import android.view.Surface;
import android.view.TextureView;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.giosis.util.qdrive.singapore.R;
import com.giosis.util.qdrive.util.Camera2APIs;
import com.giosis.util.qdrive.util.DataUtil;
import com.giosis.util.qdrive.util.DatabaseHelper;
import com.giosis.util.qdrive.util.SharedPreferencesHelper;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.text.SimpleDateFormat;
import java.util.Date;

/**
 * The barcode reader activity itself. This is loosely based on the
 * CameraPreview example included in the Android SDK.
 *
 * @author dswitkin@google.com (Daniel Switkin)
 * @author Sean Owen
 */
public final class CameraActivity extends AppCompatActivity implements Camera2APIs.Camera2Interface, TextureView.SurfaceTextureListener {
    private String TAG = "CameraActivity";

    FrameLayout layout_top_back;
    TextView text_top_title;

    TextView text_camera_scanned_count;
    TextView text_camera_barcode;

    LinearLayout layout_camera_take_photo;
    TextureView texture_camera_preview;
    ImageView img_camera_take_photo;
    Button btn_camera_save;


    //---
    Context context;
    String mBarcode;

    Camera2APIs camera2;
    String cameraId;

    Bundle extra;
    Intent intent;

    @Override
    public void onCreate(Bundle icicle) {
        super.onCreate(icicle);
        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON
                | WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD
                | WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED
                | WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON);
        setContentView(R.layout.activity_camera);


        try {
            Bundle params = new Bundle();
            params.putString("Activity", TAG);
            params.putString("method", "CameraActivity");
            DataUtil.mFirebaseAnalytics.logEvent("button_click", params);
        } catch (Exception e) {

            Log.e("Firebase", "mFirebaseAnalytics error : " + e.toString());
        }


        layout_top_back = findViewById(R.id.layout_top_back);
        text_top_title = findViewById(R.id.text_top_title);

        text_camera_scanned_count = findViewById(R.id.text_camera_scanned_count);
        text_camera_barcode = findViewById(R.id.text_camera_barcode);

        layout_camera_take_photo = findViewById(R.id.layout_camera_take_photo);
        texture_camera_preview = findViewById(R.id.texture_camera_preview);
        img_camera_take_photo = findViewById(R.id.img_camera_take_photo);
        btn_camera_save = findViewById(R.id.btn_camera_save);


        //---
        context = getApplicationContext();
        camera2 = new Camera2APIs(this);
        mBarcode = getIntent().getStringExtra("barcode");

        text_top_title.setText("(Step2) Take Photo of Signature");
        text_camera_scanned_count.setText(getScanDeliveryCount());
        text_camera_barcode.setText(mBarcode);


        layout_top_back.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View v) {

                finish();
            }
        });

        layout_camera_take_photo.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View v) {

                if (cameraId != null) {

                    camera2.takePhoto(texture_camera_preview, img_camera_take_photo);
                } else {

                    Toast.makeText(CameraActivity.this, context.getResources().getString(R.string.msg_back_camera_required), Toast.LENGTH_SHORT).show();
                }
            }
        });

        btn_camera_save.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View v) {

                onPhotoSaveButton();
            }
        });
    }

    @Override
    public synchronized void onResume() {
        super.onResume();

        camera2 = new Camera2APIs(this);

        if (texture_camera_preview.isAvailable()) {

            openCamera();
        } else {

            texture_camera_preview.setSurfaceTextureListener(this);
        }
    }

    @Override
    protected void onPause() {
        super.onPause();

        closeCamera();
    }

    @Override
    public void onBackPressed() {
        Intent intent = getIntent();
        setResult(Activity.RESULT_CANCELED, intent);
        finish();
    }


    public void onPhotoSaveButton() {

        saveProcess();

        extra = new Bundle();
        intent = new Intent();

        //엑티비티 종료
        extra.putString("data", "1");
        intent.putExtras(extra);
        this.setResult(RESULT_OK, intent);
        this.finish();
    }

    public void saveProcess() {

        if (!camera2.hasImage(img_camera_take_photo)) {
            Toast.makeText(this.getApplicationContext(), "Click the button to take the signature.", Toast.LENGTH_SHORT).show();
            return;
        }

        String opId = SharedPreferencesHelper.getSigninOpID(getApplicationContext());
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        Date date = new Date();
        String changeDataString = dateFormat.format(date);

        DatabaseHelper dbHelper = DatabaseHelper.getInstance();

        String saveSignImageFilePath = captureSign("SC_" + mBarcode, img_camera_take_photo);

        if (saveSignImageFilePath == null) {
            //SD외장카드가 USB와 컴퓨터와 연결중 또는 SD외장카드가 없는경우
            Toast.makeText(this.getApplicationContext(), " 외장메모리 체크후 다시시도해 주세요. ", Toast.LENGTH_SHORT).show();
            return;
        }

        // 디비저장
        ContentValues ContentVal = new ContentValues();
        ContentVal.put("contr_no", "0");
        ContentVal.put("invoice_no", mBarcode);
        ContentVal.put("stat", "D4");
        ContentVal.put("img_path", saveSignImageFilePath);
        ContentVal.put("punchOut_stat", "N");
        ContentVal.put("chg_id", opId);
        ContentVal.put("chg_dt", changeDataString);
        ContentVal.put("reg_id", opId);
        ContentVal.put("reg_dt", changeDataString);

        //해당바코드정보를기준으로 SCAN Delivery 조회후 있다면 업데이트
        String info = getDeliveryInfo(mBarcode);
        if (info == null) {

            dbHelper.insert(DatabaseHelper.DB_TABLE_SCAN_DELIVERY, ContentVal);
            Toast.makeText(this.getApplicationContext(), "Save Success into device ", Toast.LENGTH_SHORT).show();
        } else {

            dbHelper.update(DatabaseHelper.DB_TABLE_SCAN_DELIVERY, ContentVal,
                    "invoice_no=? COLLATE NOCASE ", new String[]{mBarcode});
            Toast.makeText(this.getApplicationContext(), "Saved success into device ", Toast.LENGTH_SHORT).show();
        }
    }


    private String captureSign(String signName, View targetView) {

        targetView.buildDrawingCache();
        Bitmap captureView = targetView.getDrawingCache();

        int width, height;
        height = captureView.getHeight();
        width = captureView.getWidth();
        Bitmap bmpGrayScale = Bitmap.createBitmap(width, height, Bitmap.Config.RGB_565);
        Canvas c = new Canvas(bmpGrayScale);
        Paint paint = new Paint();
        ColorMatrix cm = new ColorMatrix();
        cm.setSaturation(0);
        ColorMatrixColorFilter f = new ColorMatrixColorFilter(cm);
        paint.setColorFilter(f);
        c.drawBitmap(captureView, 0, 0, paint);


        FileOutputStream fos;

        String imgDirName = "/Qdrive";
        String dirPath = Environment.getExternalStorageDirectory().toString() + imgDirName;

        // 외장메모리가 사용가능한지 체크
        String sdCard = Environment.getExternalStorageDirectory().getAbsolutePath();
        File sdDir = new File(sdCard);
        if (!sdDir.canWrite()) {
            Toast.makeText(getApplicationContext(), " 내장메모리가 USB와 연결되어 컴퓨터와 파일공유중입니다.", Toast.LENGTH_SHORT).show();
            return null;
        }

        File saveDir = new File(dirPath);

        if (!saveDir.exists()) {
            saveDir.mkdir();
        }

        String filePath = dirPath + "/" + signName + ".png";
        String saveAbsolutePath = "file://" + Environment.getExternalStorageDirectory().getAbsolutePath() +
                imgDirName + "/" + signName + ".png";
        try {

            fos = new FileOutputStream(filePath);
            bmpGrayScale.compress(Bitmap.CompressFormat.PNG, 100, fos);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }

        return saveAbsolutePath;
    }


    public String getDeliveryInfo(String barcodeNo) {

        DatabaseHelper dbHelper = DatabaseHelper.getInstance();
        Cursor cursor = dbHelper.get("SELECT invoice_no FROM " + DatabaseHelper.DB_TABLE_SCAN_DELIVERY + " WHERE invoice_no='" + barcodeNo + "' COLLATE NOCASE");

        String info = null;
        if (cursor.moveToFirst()) {
            info = cursor.getString(cursor.getColumnIndexOrThrow("invoice_no"));
        }

        cursor.close();
        return info;
    }

    /*
     * 시트스캔건수
     */
    public String getScanDeliveryCount() {

        String opID = SharedPreferencesHelper.getSigninOpID(getApplicationContext());
        DatabaseHelper dbHelper = DatabaseHelper.getInstance();
        Cursor cursor = dbHelper.get("SELECT count(*) as scan_cnt FROM " + DatabaseHelper.DB_TABLE_SCAN_DELIVERY + " WHERE reg_id='" + opID + "'");

        int count = 0;

        if (cursor.moveToFirst()) {
            count = cursor.getInt(cursor.getColumnIndexOrThrow("scan_cnt"));
        }

        cursor.close();

        return String.valueOf(count);
    }


    // CAMERA
    private void openCamera() {

        CameraManager cameraManager = camera2.getCameraManager(this);
        cameraId = camera2.getCameraCharacteristics(cameraManager);

        Log.e("krm0219", TAG + "  openCamera " + cameraId);

        if (cameraId != null) {

            camera2.setCameraDevice(cameraManager, cameraId);
        } else {

            Toast.makeText(CameraActivity.this, context.getResources().getString(R.string.msg_back_camera_required), Toast.LENGTH_SHORT).show();
        }
    }

    private void closeCamera() {

        camera2.closeCamera();
    }

    @Override
    public void onCameraDeviceOpened(CameraDevice cameraDevice, Size cameraSize, int rotation) {

        texture_camera_preview.setRotation(rotation);

        SurfaceTexture texture = texture_camera_preview.getSurfaceTexture();
        texture.setDefaultBufferSize(cameraSize.getWidth(), cameraSize.getHeight());
        Surface surface = new Surface(texture);

        camera2.setCaptureSessionRequest(cameraDevice, surface);
    }

    @Override
    public void onSurfaceTextureAvailable(SurfaceTexture surfaceTexture, int i, int i1) {

        openCamera();
    }

    @Override
    public void onSurfaceTextureSizeChanged(SurfaceTexture surfaceTexture, int i, int i1) {
    }

    @Override
    public boolean onSurfaceTextureDestroyed(SurfaceTexture surfaceTexture) {
        return true;
    }

    @Override
    public void onSurfaceTextureUpdated(SurfaceTexture surfaceTexture) {
    }
}