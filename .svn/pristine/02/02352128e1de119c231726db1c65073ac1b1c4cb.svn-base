package com.giosis.util.qdrive.list.pickup;

import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.ContentValues;
import android.content.Context;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.graphics.Bitmap;
import android.os.AsyncTask;
import android.util.Log;
import android.widget.ImageView;

import com.gc.android.market.api.Base64;
import com.giosis.util.qdrive.barcodescanner.ManualHelper;
import com.giosis.util.qdrive.barcodescanner.StdResult;
import com.giosis.util.qdrive.singapore.OnServerEventListener;
import com.giosis.util.qdrive.singapore.R;
import com.giosis.util.qdrive.util.Custom_JsonParser;
import com.giosis.util.qdrive.util.DataUtil;
import com.giosis.util.qdrive.util.DatabaseHelper;
import com.giosis.util.qdrive.util.NetworkUtil;

import org.json.JSONObject;

import java.io.ByteArrayOutputStream;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;


public class ManualPickupVisitLogUploadHelper extends ManualHelper {
    String TAG = "ManualPickupVisitLogUploadHelper";

    private final Context context;
    private final String opID;
    private final String officeCode;
    private final String deviceID;

    private final String pickupNo;
    private final HashMap<String, String> imageHashMap;
    private final ImageView imageView;
    private final String driverMemo;
    private final String receiveType;
    private final String realQty;

    private final long disk_size;
    private final double lat;
    private final double lon;
    private final String pickupStat;
    private final String cancelCode;
    private final String retryDay;

    private final String networkType;
    private final OnServerEventListener eventListener;
    private final ProgressDialog progressDialog;
    private final AlertDialog resultDialog;

    public static class Builder {

        private final Context context;
        private final String opID;
        private final String officeCode;
        private final String deviceID;

        private final String pickupNo;
        private final HashMap<String, String> imageHashMap;
        private final ImageView imageView;
        private final String driverMemo;
        private final String receiveType;
        private final String realQty;

        private final long disk_size;
        private final double lat;
        private final double lon;
        private final String pickupStat;
        private final String cancelCode;
        private final String retryDay;

        private String networkType;
        private OnServerEventListener eventListener;

        public Builder(Context context, String opID, String officeCode, String deviceID,
                       String pickupNo, HashMap<String, String> imageHashMap, ImageView imageView, String driverMemo, String receiveType, String realQty,
                       long disk_size, double lat, double lon, String pickupStat, String cancelCode, String retryDay) {

            this.context = context;
            this.opID = opID;
            this.officeCode = officeCode;
            this.deviceID = deviceID;

            this.pickupNo = pickupNo;
            this.imageHashMap = imageHashMap;
            this.imageView = imageView;
            this.driverMemo = driverMemo;
            this.receiveType = receiveType;
            this.realQty = realQty;

            this.disk_size = disk_size;
            this.lat = lat;
            this.lon = lon;
            this.pickupStat = pickupStat;
            this.cancelCode = cancelCode;
            this.retryDay = retryDay;

            this.networkType = NetworkUtil.getNetworkType(context);
        }

        public ManualPickupVisitLogUploadHelper build() {
            return new ManualPickupVisitLogUploadHelper(this);
        }

        public Builder setOnServerEventListener(OnServerEventListener eventListener) {
            this.eventListener = eventListener;

            return this;
        }
    }

    private ManualPickupVisitLogUploadHelper(Builder builder) {

        this.context = builder.context;
        this.opID = builder.opID;
        this.officeCode = builder.officeCode;
        this.deviceID = builder.deviceID;

        this.pickupNo = builder.pickupNo;
        this.imageHashMap = builder.imageHashMap;
        this.imageView = builder.imageView;
        this.driverMemo = builder.driverMemo;
        this.receiveType = builder.receiveType;
        this.realQty = builder.realQty;

        this.disk_size = builder.disk_size;
        this.lat = builder.lat;
        this.lon = builder.lon;
        this.pickupStat = builder.pickupStat;
        this.cancelCode = builder.cancelCode;
        this.retryDay = builder.retryDay;

        this.networkType = builder.networkType;
        this.eventListener = builder.eventListener;
        this.progressDialog = getProgressDialog(this.context);
        this.resultDialog = getResultAlertDialog(this.context);
    }

    private ProgressDialog getProgressDialog(Context context) {

        ProgressDialog progressDialog = new ProgressDialog(context);
        progressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
        progressDialog.setMessage(context.getResources().getString(R.string.text_set_transfer));
        progressDialog.setCancelable(false);
        return progressDialog;
    }

    private AlertDialog getResultAlertDialog(final Context context) {

        AlertDialog dialog = new AlertDialog.Builder(context)
                .setTitle(context.getResources().getString(R.string.text_upload_result))
                .setCancelable(true).setPositiveButton(context.getResources().getString(R.string.button_ok), new OnClickListener() {

                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        if (dialog != null)
                            dialog.dismiss();

                        if (eventListener != null) {
                            eventListener.onPostResult();
                        }
                    }
                })
                .create();

        return dialog;
    }

    private void showResultDialog(String message) {
        resultDialog.setMessage(message);
        resultDialog.show();
    }

    class PickupUploadTask extends AsyncTask<Void, Integer, StdResult> {
        int progress = 0;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            if (progressDialog != null) {

                progressDialog.setMax(1);
                progressDialog.show();
            }
        }

        @Override
        protected StdResult doInBackground(Void... params) {

            StdResult result = requestPickupUpload(pickupNo);
            publishProgress(1);

            return result;
        }

        @Override
        protected void onProgressUpdate(Integer... values) {
            super.onProgressUpdate(values);
            progress += values[0];
            progressDialog.setProgress(progress);
        }

        @Override
        protected void onPostExecute(StdResult result) {
            super.onPostExecute(result);

            try {

                if (progressDialog != null && progressDialog.isShowing())
                    progressDialog.dismiss();
            } catch (Exception e) {

                // !((Activity)context).isFinishing()
            }

            int successCount = 0;
            int failCount = 0;
            String fail_reason = "";

            int resultCode = result.getResultCode();
            String resultMsg = result.getResultMsg();

            try {
                if (resultCode < 0) {
                    if (resultCode == -14) {
                        fail_reason += context.getResources().getString(R.string.msg_upload_fail_14);
                    } else if (resultCode == -15) {
                        fail_reason += context.getResources().getString(R.string.msg_upload_fail_15);
                    } else if (resultCode == -16) {
                        fail_reason += context.getResources().getString(R.string.msg_upload_fail_16);
                    } else {
                        fail_reason += resultMsg;
                    }

                    failCount++;

                } else {
                    successCount++;
                }

                if (successCount > 0 && failCount == 0) {
                    String msg = String.format(context.getResources().getString(R.string.text_upload_success_count), successCount);
                    showResultDialog(msg);
                } else {

                    if (resultCode == -16) {
                        showResultDialog(context.getResources().getString(R.string.msg_network_connect_error_saved));
                    } else {
                        String msg = String.format(context.getResources().getString(R.string.text_upload_fail_count), successCount, failCount, fail_reason);
                        showResultDialog(msg);
                    }
                }
            } catch (Exception e) {

                Log.e("Exception", TAG + "  onPostExecute Exception : " + e.toString());
            }
        }


        private StdResult requestPickupUpload(String assignNo) {

            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            Date date = new Date();
            String changeDataString = dateFormat.format(date);
            String saveImgPath = imageHashMap.get(assignNo);

            ContentValues contentVal = new ContentValues();
            contentVal.put("stat", pickupStat);
            contentVal.put("real_qty", realQty);
            contentVal.put("rcv_type", receiveType);
            contentVal.put("img_path", saveImgPath);
            contentVal.put("chg_id", opID);
            contentVal.put("chg_dt", changeDataString);
            contentVal.put("fail_reason", cancelCode); // Cancel 코드값 저장
            contentVal.put("driver_memo", driverMemo); // Memo
            contentVal.put("retry_dt", retryDay); // 재시도 날짜

            DatabaseHelper dbHelper = DatabaseHelper.getInstance();
            dbHelper.update(DatabaseHelper.DB_TABLE_INTEGRATION_LIST, contentVal,
                    "invoice_no=? COLLATE NOCASE " + "and reg_id = ?", new String[]{assignNo, opID});


            StdResult result = new StdResult();

            if (!NetworkUtil.isNetworkAvailable(context)) {
                result.setResultCode(-16);
                result.setResultMsg("");
                return result;
            }

            try {

                imageView.buildDrawingCache();
                Bitmap captureView = imageView.getDrawingCache();
                String bitmapString = bitmapToString(captureView);  // 비트맵을 스트링으로 변환

                JSONObject job = new JSONObject();
                job.accumulate("rcv_type", receiveType);
                job.accumulate("stat", pickupStat);                     // P3:Pickup Down / PX:Pickup Cancel / PF:Pickup Failed
                job.accumulate("chg_id", opID);
                job.accumulate("deliv_msg", "(by Qdrive RealTime-Upload)"); // 내부관리자용 메세지
                job.accumulate("opId", opID);
                job.accumulate("officeCd", officeCode);
                job.accumulate("device_id", deviceID);
                job.accumulate("network_type", networkType);
                job.accumulate("no_songjang", assignNo);
                job.accumulate("fileData", bitmapString);
                job.accumulate("fileData2", "");
                job.accumulate("remark", driverMemo);                      // 드라이버 메세지 driver_memo	== remark
                job.accumulate("disk_size", disk_size);
                job.accumulate("lat", lat);
                job.accumulate("lon", lon);
                job.accumulate("real_qty", realQty);                        // 실제픽업수량
                job.accumulate("fail_reason", cancelCode);                  // 픽업취소이유코드
                job.accumulate("retry_day", retryDay);                      // Failed - 픽업 재시도 날짜
                job.accumulate("app_id", DataUtil.appID);
                job.accumulate("nation_cd", DataUtil.nationCode);


                String methodName = "SetPickupUploadData";
                String jsonString = Custom_JsonParser.requestServerDataReturnJSON(MOBILE_SERVER_URL, methodName, job);
                // {"ResultCode":0,"ResultMsg":"SUCCESS"}
                // {"ResultCode":-11,"ResultMsg":"SUCCESS"}

                JSONObject jsonObject = new JSONObject(jsonString);
                int resultCode = jsonObject.getInt("ResultCode");

                result.setResultCode(resultCode);
                result.setResultMsg(jsonObject.getString("ResultMsg"));

                if (resultCode == 0) {

                    ContentValues contentVal2 = new ContentValues();
                    contentVal2.put("stat", pickupStat);
                    contentVal2.put("driver_memo", driverMemo);
                    contentVal2.put("punchOut_stat", "S");

                    dbHelper.update(DatabaseHelper.DB_TABLE_INTEGRATION_LIST, contentVal2,
                            "invoice_no=? COLLATE NOCASE " + "and reg_id = ?", new String[]{assignNo, opID});
                }
            } catch (Exception e) {

                result.setResultCode(-15);
                result.setResultMsg("Exception : " + e.toString());
            }

            return result;
        }
    }


    public ManualPickupVisitLogUploadHelper execute() {
        PickupUploadTask pickupUploadTask = new PickupUploadTask();
        pickupUploadTask.execute();
        return this;
    }

    // 비트맵을 바이트로 변환한후 스트링으로 변환
    public String bitmapToString(Bitmap bitmap) {

        String pngImage = "";
        try {
            ByteArrayOutputStream stream = new ByteArrayOutputStream();
            bitmap.compress(Bitmap.CompressFormat.PNG, 100, stream);
            byte[] byteArray = stream.toByteArray();
            String imgToString = Base64.encodeBytes(byteArray);

            StringBuilder sb = new StringBuilder();
            sb.append("data:image/png;base64,");
            sb.append(imgToString);
            pngImage = sb.toString();

        } catch (Exception e) {
            e.printStackTrace();
        }
        return pngImage;
    }
}